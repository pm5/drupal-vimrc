## Forms API

snippet markup
	$form['${1:/* form element */}'] = array(
	  '#markup' => '<${2:div}>' . '${3:/* markup */}' . '</$2>',
	);

## Database functions

snippet db_query
	$result = db_query('${1:/* Query */}', ${2:/* Arguments */}, ${3:/* Options */});

## drupal_ functions

snippet drupal_add_css
	drupal_add_css(${1:/* Data */}, '${2:/* Options */}');

snippet drupal_add_js
	drupal_add_js(${1:/* Data */}, '${2:/* Options */}');

snippet drupal_goto
	drupal_goto('${1:path}', '${2:options}', '${3:http_response_code}');

## Hooks

snippet hook
	/**
	 * Implements hook_$1().
	 */
	function `Filename()`_${1}() {
		${2}
	}

snippet hook_block
	/**
	 * Implements hook_block_info().
	 */
	function `Filename()`_block_info() {
		$blocks = array();
		$blocks['${1:delta}'] = array(
			'info' => t('${2:subject}'),
		);
		return $blocks;
	}

	/**
	 * Implements hook_block_view().
	 */
	function `Filename()`_block_view($delta = '') {
		if ($delta == '$1') {
			return array(
			  'subject' => t('${3:block title}'),
				'content' => ${4},
			);
		}
	}

	/**
	 * Implements hook_block_save().
	 */
	function `Filename()`_block_save($delta = '', $edit = array()) {
	}

	/**
	 * Implements hook_block_configure().
	 */
	function `Filename()`_block_configure($delta = '') {
	}

	/**
	 * Implements hook_block_list_alter().
	 */
	function `Filename()`_block_list_alter(&$blocks) {
	}

	/**
	 * Implements hook_block_info_alter().
	 */
	function `Filename()`_block_info_alter(&$blocks, $theme, $code_blocks) {
	}

	/**
	 * Implements hook_block_view_alter().
	 */
	function `Filename()`_block_view_alter(&$data, $block) {
	}

	/**
	 * Implements hook_block_view_MODULE_DELTA_alter().
	 */
	function `Filename()`_block_view_MODULE_DELTA_alter(&$data, $block) {
	}

snippet hook_comment
	/**
	 * Implements hook_comment_view().
	 */
	function `Filename()`_comment_view($comment, $view_mode, $langcode) {
	  ${1:// Your code here.}
	}

	/**
	 * Implements hook_comment_load().
	 */
	function `Filename()`_comment_load($comments) {
	}

	/**
	 * Implements hook_comment_update().
	 */
	function `Filename()`_comment_update($comment) {
	}

	/**
	 * Implements hook_comment_insert().
	 */
	function `Filename()`_comment_insert($comment) {
	}

	/**
	 * Implements hook_comment_delete().
	 */
	function `Filename()`_comment_delete($comment) {
	}

	/**
	 * Implements hook_comment_presave().
	 */
	function `Filename()`_comment_presave($comment) {
	}

	/**
	 * Implements hook_comment_publish().
	 */
	function `Filename()`_comment_publish($comment) {
	}

	/**
	 * Implements hook_comment_unpublish().
	 */
	function `Filename()`_comment_unpublish($comment) {
	}

	/**
	 * Implements hook_comment_view_alter().
	 */
	function `Filename()`_comment_view_alter(&$build) {
	}

snippet hook_node_type
	/**
	 * Implements hook_node_type_delete().
	 */
	function `Filename()`_node_type_delete($info) {
	  ${1:// Your code here.}
	}

	/**
	 * Implements hook_node_type_insert().
	 */
	function `Filename()`_node_type_insert($info) {
	}

	/**
	 * Implements hook_node_type_update().
	 */
	function `Filename()`_node_type_update($info) {
	}

snippet hook_permission
	/**
	 * Implements hook_permission().
	 */
	function `Filename()`_permission() {
	  return array('${1:/* permission */}' => array(
	            'title' => t('${2}'),
	            'description' => t('${3:/* optional */}'),
	            'restrict access' => t('${4:/* optional */}'),
	            'warning' => t('${5:/* optional */}'),
	          ));
	}

snippet hook_requirements
	/**
	 * Implements hook_requirements().
	 * @param string $phase
	 *  The phase in which hook_requirements is run:
	 *    'install': the module is being installed.
	 *    'update': the module is enabled and update.php is run.
	 *    'runtime': the runtime requirements are being checked and shown on the
	 *      status report page.
	 * @return
	 *   A keyed array of requirements. Each requirement is itself an array with
	 *     the following items:
	 *       'title': the name of the requirement.
	 *       'value': the current value (e.g. version, time, level, ...).
	 *         During install phase, this should only be used for version
	 *         numbers, do not set it if not applicable.
	 *       'description': description of the requirement/status.
	 *       'severity': the requirement's result/severity level, one of:
	 *         REQUIREMENT_INFO: For info only.
	 *         REQUIREMENT_OK: The requirement is satisfied.
	 *         REQUIREMENT_WARNING: The requirement failed with a warning.
	 *         REQUIREMENT_ERROR: The requirement failed with an error.
	 *
	 */
	function `Filename()`_requirements($phase) {
	  $requirements = array();

	  ${1:// Your code here.}

	  return $requirements;
	}

snippet hook_update_N
	/**
	 * Implements hook_update_N().
	 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_update_N/7
	 * @return array $ret
	 *  An array with the results of the calls to update_sql().
	 */
	function `Filename()`_update_N(&$sandbox) {
	  $ret = array();

	  ${1:// Your code here.}

	  return $ret;
	}

snippet hook_form
	function `Filename()`_${1:data}_form($form, &$form_state)
	{
		$form = array();
		${2:// Your code here.}
		return $form;
	}

	function `Filename()`_$1_form_validate($form, &$form_state)
	{
		${3}
	}

	function `Filename()`_$1_form_submit($form, &$form_state)
	{
		${4}
	}
	${5}

snippet hook_form_FORM_ID_alter
	/**
	 * Implements hook_form_FORM_ID_alter().
	 * @see https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_form_FORM_ID_alter/7
	 * @return array $ret
	 *  An array with the results of the calls to update_sql().
	 */
	function `Filename()`_form_${1:form_id}_alter(&$form, &$form_state, $form_id) {
	  ${2:// Your code here.}
	}

snippet hook_field_widget
	/**
	 * Implements hook_field_widget_info().
	 * @see https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_info/7
	 * @return array $ret
	 *  An array describing the widget types implemented by the module.
	 */
	function `Filename()`_field_widget_info() {
		$info = array();
		${1:// Your code here.}
		return $info;
	}

	/**
	 * Implements hook_field_widget_form().
	 * @see https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_form/7
	 * @return
	 *  The form elements for a single widget for this field.
	 */
	function `Filename()`_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
		return $element;
	}

snippet hook_schema
	function `Filename()`_schema() {
	  $schema = array();
	  $schema['`Filename()`_${1:/* entity */}'] = array(
	    'description' => ${2:/* description of the entity */},
	    'fields' => array(
	      '${3:/* id field */}' => array(
	        'description' => 'Primary key of $1',
	        'type' => 'serial',
	        'unsigned' => TRUE,
	        'not null' => TRUE,
	      ),
	      ${4:/* more fields /*}
	      'language' => array(
	        'description' => 'Language of this set of settings',
	        'type' => 'varchar',
	        'length' => 12,
	        'not null' => TRUE,
	        'default' => '',
	      ),
	      'created' => array(
	        'description' => 'The Unix timestamp of the entity creation time.',
	        'type' => 'int',
	        'not null' => TRUE,
	        'default' => 0,
	      ),
	    ),
	    'primary key' => array('$3'),
	    'indexes' => array(
	      'language' => array('language'),
	    ),
	  );
	  return $schema;
	}

snippet hook_views
	/**
	 * Implements hook_views_api().
	 */
	function `Filename()`_views_api()
	{
	  return array(
	    'api' => '3.0',
	  );
	}

	/**
	 * Implements hook_views_default_views().
	 * Put this in '`Filename()`.views_default.inc' under module directory to load all exported views under 'views' directory.
	 */
	function `Filename()`_views_default_views()
	{
	  $path = './' . drupal_get_path('module', '`Filename()`') . '/views/*.inc';
	  $views = array();
	  foreach (glob($path) as $views_filename) {
	    require_once($views_filename);
	    array_push($views, $view);
	  }
	  return $views;
	}

snippet hook_entity
	/**
	 * Implements hook_entity_info().
	 */
	function my_entity_entity_info()
	{
		$entities = array();

		return $entities;
	}

snippet hook_menu_block
	/**
	 * Implements hook_menu_block_get_menus()
	 */
	function `Filename()`_menu_block_get_menus() {
		$menus = array();
		$menus['`Filename()`-menu'] = 'menu title';
		return $menus;
	}

	/**
	 * Implements hook_menu_block_blocks()
	 */
	function `Filename()`_menu_block_blocks() {
		return array(
			'`Filename()`-menu' => array(
				'menu_name' => 'primary-links',
				'parent_mlid' => 0,
				'title_link' => FALSE,
				'admin_title' => 'Drop-down navigation',
				'level' => 1,
				'follow' => 0,
				'depth' => 2,
				'expanded' => TRUE,
				'sort' => FALSE,
			),
		);
	}

	/**
	 * Implements hook_menu_block_get_sort_menus()
	 */
	function `Filename()`_menu_block_get_sort_menus() {
		$menus = array();
		$menus['`Filename()`-menu'] = 'menu title';
		// Optionally, add a regular expression to match several menus at once.
		//$menus['/^my\-menus\-.+/'] = t('My menus');

		return $menus;
	}

	/**
	 * Implements hook_menu_block_tree_alter()
	 */
	function hook_menu_block_tree_alter(&$tree, &$config) {
	}

## Everything else

snippet t
	t('${1:/* Your text */}', array(${2:/* arguments */}), array(${3:/* options */}))

